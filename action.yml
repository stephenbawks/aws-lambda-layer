name: AWS Lambda Layer Builder
description: Action will create/publish an AWS Lambda Layer from your GitHub Workflow. Does the undifferentiated heavy lifting for you. 

# Including library dependencies in a layer
# https://docs.aws.amazon.com/lambda/latest/dg/configuration-layers.html#configuration-layers-path

# Lambda Runtimes
# https://docs.aws.amazon.com/lambda/latest/dg/lambda-runtimes.html

# Including library dependencies in a layer
# https://docs.aws.amazon.com/lambda/latest/dg/configuration-layers.html#configuration-layers-path


branding:
  icon: layers
  color: orange

inputs:
  layer-name:
    description: Name for the Lambda Layer
    required: true
  layer-directory:
    description: Working directory in repository where requirements file exists
    required: true
  runtime:
    description: AWS Lambda Runtime
    required: true
  bucketname:
    description: AWS S3 Bucket Name where layer will be uploaded
    required: true
  prefix-folder-path:
    description: An optional prefix that will be used for a folder path inside the S3 bucket
  principal:
    description: An AWS Account ID to grant layer usage permissions to.  
    required: true
  compatible-runtimes:
    description: A list of compatible function runtimes. Used for filtering with ListLayers and ListLayerVersions.
  extra-layer-regions:
    description:  A comma seperated list of regions you want to deploy this region to.

runs:
  using: 'composite'
  steps:

    - name: Install Python Requirements
      shell: bash
      working-directory: ${{ inputs.layer-directory }}
      run: |
        if [ "${{ inputs.runtime }}" = "python" ]; then
          echo "Building Python Layer"
          mkdir -p python && pip3 install -r requirements.txt -t ./python
          zip -r lambda_layer.zip ./python
        elif [ "${{ inputs.runtime }}" = "node" ]; then
          echo "Building Node Layer"
          mkdir -p nodejs/node_modules  && cd nodejs
          npm init -y
          while read p; do 
              npm install --save "$p"
          done < ../requirements.txt
          cd ..
          zip -r lambda_layer.zip ./nodejs/node_modules
        else
          echo "Something else was specified for runtime"
        fi

    - name: Installing boto3
      shell: bash
      run: pip3 install boto3

    - name: Upload Zip and Create Layer
      shell: bash
      id: build-layer
      working-directory: ${{ inputs.layer-directory }}
      run: |
        DATE=$(date +"%d_%m_%Y")
        FOLDER_PATH="${{ inputs.prefix-folder-path }}"
        FORMATTED_LAYER_NAME="${{ inputs.layer-name }}-${DATE}"
        FORMATTED_ZIP="${FORMATTED_LAYER_NAME}-${RANDOM}.zip"

        if [ -z ${{ inputs.extra-layer-regions }} ]; then 
          echo "Layer will only be deployed to default region.";
          ADDITIONAL_LAYER_REGIONS=false
        else
          echo "Layer will be deployed to the additional regions: ${{ inputs.extra-layer-regions }}";
          ADDITIONAL_LAYER_REGIONS=true
        fi

        aws s3 cp ./lambda_layer.zip s3://${{ inputs.bucketname }}/${{ inputs.prefix-folder-path }}/${FORMATTED_ZIP}

        RESPONSE=$(aws lambda publish-layer-version --layer-name ${FORMATTED_LAYER_NAME} \
        --description "${{ inputs.layer-name }} Layer" \
        --content S3Bucket=${{ inputs.bucketname }},S3Key=${{ inputs.prefix-folder-path }}/${FORMATTED_ZIP})

        LAYER_VERSION=$(echo $RESPONSE | jq -r '.Version')
        LAYER_ARN=$(echo $RESPONSE | jq -r '.LayerArn')

        aws lambda add-layer-version-permission --layer-name "${FORMATTED_LAYER_NAME}" \
        --statement-id "GrantAccountAccess-${RANDOM}" \
        --action lambda:GetLayerVersion \
        --principal "${{ inputs.principal }}" \
        --version-number "${LAYER_VERSION}"

        if [ ${ADDITIONAL_LAYER_REGIONS} ]; then
          for r in $(echo $regions | sed "s/,/ /g")
          do
            echo "Deploying Layer to Region: ${r}"
            RESPONSE=$(aws lambda publish-layer-version --layer-name ${FORMATTED_LAYER_NAME} \
            --description "${{ inputs.layer-name }} Layer" \
            --content S3Bucket=${{ inputs.bucketname }},S3Key=${{ inputs.prefix-folder-path }}/${FORMATTED_ZIP} --region ${r})

            LAYER_VERSION=$(echo $RESPONSE | jq -r '.Version')
            LAYER_ARN=$(echo $RESPONSE | jq -r '.LayerArn')

            aws lambda add-layer-version-permission --layer-name "${FORMATTED_LAYER_NAME}" \
            --statement-id "GrantAccountAccess-${RANDOM}" \
            --action lambda:GetLayerVersion \
            --principal "${{ inputs.principal }}" \
            --version-number "${LAYER_VERSION}" --region ${r}
          done
        fi
    
    - uses: actions/upload-artifact@v2
      with:
        name: lambda-layer
        path: ./${{ inputs.layer-directory }}/lambda_layer.zip
        retention-days: 5

    # - name: Lambda Layer Permission
    #   shell: bash
    #   run: |
    #     aws lambda add-layer-version-permission --layer-name "${{ steps.build-layer.outputs.layer_name }}" \
    #     --statement-id "GrantAccountAccess-${RANDOM}" \
    #     --action lambda:GetLayerVersion \
    #     --principal "${{ inputs.principal }}" \
    #     --version-number "${{ steps.build-layer.outputs.layer_version }}"

